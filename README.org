# -*- org -*-
* Tested with Python2.7
* Logging
** [[http://docs.python.org/library/logging.html][Documentation]]
** Examples
*** Simplest logger usage example
   - [[https://github.com/lmmilewski/learn_python/blob/master/log_basic.py][log_basic.py]]
   - How to configure log output format [[https://github.com/lmmilewski/learn_python/blob/master/log_format.py][log_format.py]]
   - How to read logger configuration from file
     + [[https://github.com/lmmilewski/learn_python/blob/master/log_file.py][log_file.py]]
     + [[https://github.com/lmmilewski/learn_python/blob/master/log_file.conf][log_file.conf]]
   - Logging in many modules
     + [[https://github.com/lmmilewski/learn_python/blob/master/log_main.py][log_main.py]]
     + [[https://github.com/lmmilewski/learn_python/blob/master/log_1.py][log_1.py]]
     + [[https://github.com/lmmilewski/learn_python/blob/master/log_2.py][log_2.py]]
* Documentation
  - [[https://github.com/lmmilewski/learn_python/blob/master/docstring.py][docstring.py]]
  - based on [[http://google-styleguide.googlecode.com/svn/trunk/pyguide.html?showone%3DComments#Comments][google style guide]]
* Data types
  - [[https://github.com/lmmilewski/learn_python/blob/master/data_types_dict.py][data_type_dict.py]]
  - [[https://github.com/lmmilewski/learn_python/blob/master/data_types_lists.py][data_type_lists.py]]
  - [[https://github.com/lmmilewski/learn_python/blob/master/data_types_tuples.py][data_type_tuples.py]]
* Introspection
  [[https://github.com/lmmilewski/learn_python/blob/master/introspection.py][introspection.py]]
** dir built-in function
  - dir: abbrev 'directory' (list of things, not necessarily files)
  - [[http://docs.python.org/library/functions.html#dir][dir in docs]]
  - returns list of *attributes* of given object
  - dir is intended for shell use, so it doesn't return all attributes
    (for example metaclass attrs are missing)
  - you can override what dir returns for given object by supplying
    __dir__ method for it. Note that your class must inherit object to
    do that
  - funny thing is that print is a statement (not a function) in
    Python2.x, hence you can't say dir(print)
** vars, __dict__
  - instance variables of object obj are stored in its __dict__
    dictionary. You can fetch it using function vars(obj)
** using dot operator
   - when you use dot operator on an instance of a class A to get a
     method foo Python first checks for foo in the instance (in its
     __dict__)
  - it won't find it as there are only instance variables
  - then it looks for foo in the type of the instances - A.
  - foo is in A.__dict__, so Python knows which method to call
** getting list of methods in class / functions in module
   - [for m in dir(C) if callable(getattr(m, C))]
** type
   - you can get type of the object using type function
     + import types
     + type("hello world") == types.StringType
** getattr
   - returns None in case of failure
   - you can provide default value using three argument getattr
* pitfalls of using and / or used as conditional expression
  - and / or does not return True/False but one of it's arguments
    + or returns first argument that evaluates to True or last argument
    + and returns first argument that evaluates to False or last argument
  - you can simulate ?: from C with and or:
    + B ? a : b   (python: if B then a else b) is equivalent to
    + B and a or b - well it's not
    + but (B and [a] or [b])[0] is
    + the thing is that when a is False then the expression does not
      work as expected (always b is returned). We can make sure a is
      never False by putting it into list
* Classes
** multiple inheritance
  - [[https://github.com/lmmilewski/learn_python/blob/master/multiple_inheritance.py][mutliple_inheritance.py]]
*** mro (Method Resolution Order)
   - [[http://www.python.org/download/releases/2.3/mro/][documentation]]
   - mro resides in __mro__
   - classes are in __mro__ before their base classes
   - no duplicates in __mro__
   - order of parents of all classes is preserved in __mro__
   - there are cases for which valid mro does not exist ([[https://github.com/lmmilewski/learn_python/blob/master/nomro.py][nomro.py]])
*** super
    - super solves diamond
    - super let's you avoid stating base class explicitly when calling
      methods
    - [[http://rhettinger.wordpress.com/2011/05/26/super-considered-super/][Python super considered super]]
    - [[http://fuhm.net/super-harmful/][Python super considered harmful]]
      + super DOES NOT call method in super class. You say WTF? and I
        say it calls method in class that is next in mro
      + you don't know what arguments should be passed to next
        method. You need to pass all arguments you got and always
        implement methods to accept all arguments
      + you must always use super in all methods (say you forgot to
        call super in class that inherits only object - in method
        __init__. objects __init__ will never be called)
      + ...
*** overall
    This applies if you have complex class hierarchies and so on which
    is unlikely unless you produce code of really bad quality. Common
    case is "I don't care it doesn't affect me".
** virtual_methods
   - [[https://github.com/lmmilewski/learn_python/blob/master/virtual.py][virtual.py]]
   - in Python all methods are effectively virtual
   - I couldn't find a way to use non-virtual interface idiom (c++) - anyone?
** subclassing built-in data types
   - [[https://github.com/lmmilewski/learn_python/blob/master/cnt_dict.py][cnt_dict.py]]
** built-in data types sizes
   - [[https://github.com/lmmilewski/learn_python/blob/master/bidt_size.py][bidt_dict.py]]
** you can pass classes/functions as arguments/return values treating them as objects
   - [[https://github.com/lmmilewski/learn_python/blob/master/class_func_obj.py][class_func_obj.py]]
